# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//foundation/communication/dsoftbus/dsoftbus.gni")

ctrl_sources = [
  "//third_party/libcoap/src/address.c",
  "//third_party/libcoap/src/async.c",
  "//third_party/libcoap/src/block.c",
  "//third_party/libcoap/src/coap_asn1.c",
  "//third_party/libcoap/src/coap_cache.c",
  "//third_party/libcoap/src/coap_debug.c",
  "//third_party/libcoap/src/coap_event.c",
  "//third_party/libcoap/src/coap_gnutls.c",
  "//third_party/libcoap/src/coap_hashkey.c",
  "//third_party/libcoap/src/coap_io.c",
  "//third_party/libcoap/src/coap_mbedtls.c",
  "//third_party/libcoap/src/coap_notls.c",
  "//third_party/libcoap/src/coap_openssl.c",
  "//third_party/libcoap/src/coap_prng.c",
  "//third_party/libcoap/src/coap_session.c",
  "//third_party/libcoap/src/coap_tcp.c",
  "//third_party/libcoap/src/coap_time.c",
  "//third_party/libcoap/src/coap_tinydtls.c",
  "//third_party/libcoap/src/encode.c",
  "//third_party/libcoap/src/mem.c",
  "//third_party/libcoap/src/net.c",
  "//third_party/libcoap/src/option.c",
  "//third_party/libcoap/src/pdu.c",
  "//third_party/libcoap/src/resource.c",
  "//third_party/libcoap/src/str.c",
  "//third_party/libcoap/src/subscribe.c",
  "//third_party/libcoap/src/uri.c",
]

ctrl_include = [
  "../nstackx_util/interface",
  "interface",
  "include",
  "include/coap_discover",
  "//third_party/libcoap/include",
  "//third_party/cJSON",
]

ctrl_cflags = [
  "-Wall",
  "-DCOAP_SUPPORT_SOCKET_BROADCAST",
  "-DCOAP_USER_DEFAULT_PORT=5684",
]

cflags = []
include_dirs = []

if (dsoftbus_standard_feature_ifname_prefix) {
  cflags += [ "-DNSTACKX_ETH_INTERFACE_NAME_PREFIX=\"br\"" ]
}

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  config("dfinder_interface") {
    include_dirs = [ "interface" ]
  }
  shared_library("nstackx_ctrl") {
    sources = [
      "core/coap_discover/coap_app.c",
      "core/coap_discover/coap_client.c",
      "core/coap_discover/coap_discover.c",
      "core/coap_discover/json_payload.c",
      "core/nstackx_common.c",
      "core/nstackx_database.c",
      "core/nstackx_device.c",
      "core/nstackx_smartgenius.c",
    ]
    sources += ctrl_sources
    include_dirs += ctrl_include
    public_configs = [ ":dfinder_interface" ]
    deps = [
      "../nstackx_util:nstackx_util.open",
      "//build/lite/config/component/cJSON:cjson_shared",
      "//third_party/bounds_checking_function:libsec_shared",
      "//third_party/libcoap:libcoap",
    ]
    if (ohos_kernel_type == "liteos_a") {
      defines = [
        "NSTACKX_WITH_LITEOS",
        "LWIP_LITEOS_A_COMPAT",
      ]
    }
    cflags += ctrl_cflags
    cflags += [
      "-fPIC",
      "-std=c99",
    ]
    cflags_cc = cflags
    ldflags = [ "-fPIC" ]
  }
} else {
  import("//build/ohos.gni")

  config("dfinder_interface") {
    include_dirs = [ "interface" ]
  }
  ohos_shared_library("nstackx_ctrl") {
    if (dsoftbus_standard_feature_ifname_prefix) {
      cflags_cc = cflags
      cflags_cc += ctrl_cflags
    } else {
      cflags_cc = ctrl_cflags
    }
    cflags += ctrl_cflags
    sources = [
      "core/coap_discover/coap_app.c",
      "core/coap_discover/coap_client.c",
      "core/coap_discover/coap_discover.c",
      "core/coap_discover/json_payload.c",
      "core/nstackx_common.c",
      "core/nstackx_database.c",
      "core/nstackx_device.c",
      "core/nstackx_smartgenius.c",
    ]
    sources += ctrl_sources
    include_dirs += [
      "//third_party/bounds_checking_function/include",
      "../nstackx_util/platform/unix",
    ]
    include_dirs += ctrl_include
    public_configs = [ ":dfinder_interface" ]
    deps = [
      "../nstackx_util:nstackx_util.open",
      "//third_party/bounds_checking_function:libsec_static",
      "//third_party/cJSON:cjson_static",
      "//third_party/libcoap:libcoap",
    ]
    subsystem_name = "communication"
    part_name = "dsoftbus_standard"
  }
}
